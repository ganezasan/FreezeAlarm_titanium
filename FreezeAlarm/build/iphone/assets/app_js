/*
 * Single Window Application Template:
 * A basic starting point for your application.  Mostly a blank canvas.
 * 
 * In app.js, we generally take care of a few things:
 * - Bootstrap the application with any data we need
 * - Check for dependencies like device type, platform version or network connection
 * - Require and open our top-level UI component
 *  
 */

//bootstrap and check dependencies
if (Ti.version < 1.8 ) {
	alert('Sorry - this application template requires Titanium Mobile SDK 1.8 or later');	  	
}

// This is a single context application with mutliple windows in a stack
(function() {
	Ti.UI.setBackgroundColor('#aac5f0'); 	
	//determine platform and form factor and render approproate components
	var osname = Ti.Platform.osname,
		version = Ti.Platform.version,
		height = Ti.Platform.displayCaps.platformHeight,
		width = Ti.Platform.displayCaps.platformWidth;
	
	//considering tablet to have one dimension over 900px - this is imperfect, so you should feel free to decide
	//yourself what you consider a tablet form factor for android
	var isTablet = osname === 'ipad' || (osname === 'android' && (width > 899 || height > 899));
	
	var Window;
	if (isTablet) {
		Window = require('ui/tablet/ApplicationWindow');
	}
	else {
		// Android uses platform-specific properties to create windows.
		// All other platforms follow a similar UI pattern.
		if (osname === 'android') {
			Window = require('ui/handheld/android/ApplicationWindow');
		}
		else {
			Window = require('ui/handheld/ApplicationWindow');
		}
	}
	// var rootWindow;
// 	 
	// rootWindow = Ti.UI.createWindow();
// 	 
	// Ti.App.nav = Ti.UI.iPhone.createNavigationGroup({
	    // window:Window // 初期ウィンドウ
	// });

	// rootWindow.add(Ti.App.nav);
	// rootWindow.open();

	new Window().open();

	// (function push_notifications() {
		
		var win = Ti.UI.createWindow();		
		var label = Ti.UI.createLabel({
			text:'Attempting to register with Apple for Push Notifications...',
			textAlign:'center',
			width:'auto'
		});
		
		win.add(label);
		
		// register for push notifications
		Ti.Network.registerForPushNotifications({
			types: [
				Ti.Network.NOTIFICATION_TYPE_BADGE,
				Ti.Network.NOTIFICATION_TYPE_ALERT,
				Ti.Network.NOTIFICATION_TYPE_SOUND
			],
			success:function(e)
			{
				var deviceToken = e.deviceToken;
				label.text = "Device registered. Device token: \n\n"+deviceToken;
				Ti.API.info("Push notification device token is: "+deviceToken);
				Ti.API.info("Push notification types: "+Ti.Network.remoteNotificationTypes);
				Ti.API.info("Push notification enabled: "+Ti.Network.remoteNotificationsEnabled);
			},
			error:function(e)
			{
				label.text = "Error during registration: "+e.error;
			},
			callback:function(e)
			{
				// called when a push notification is received.
				var obj = JSON.parse(JSON.stringify(e.data));
				alert(obj.alert);
				// alert("Received a push notification\n\nPayload:\n\n"+JSON.stringify(e.data));
				// var jsontext = eval('(' + JSON.stringify(e.data) + ')');
				// alert("Received a push notification:\n"+ jsontext.forecast.aps.alert);
			}
		});	
		return win;
	// })();
})();



